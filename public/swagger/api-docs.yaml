openapi: 3.0.3
info:
  title: Battle of Stalingrad Game - OpenAPI 3.0
  description: |-
    This is the documentation of the API for the Battle of Stalingrad game based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). 
    
    It includes endpoints for managing tanks, maps, players, and scores, as well as simulating battles and retrieving leaderboards.
    
    Some useful links:
    - [The Battle of Stalingrad Game repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Battle of Stalingrad Game](https://github.com/andresj-sanchez/battle-of-stalingrad-game/blob/main/public/swagger/api-docs.yaml)
  contact:
    email: contacttowork.andres@gmail.com
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://127.0.0.1:8080/api/v1
    description: Local server
tags:
  - name: Tanks
    description: Everything about tanks
  - name: Maps
    description: Everything about maps
  - name: Players
    description: Everything about players
  - name: Scores
    description: Access to game scores
  - name: Leaderboard
    description: Access to global leaderboards
  - name: Simulation
    description: Simulate battles between tanks
paths:
  /tanks:
    get:
      summary: Get all tanks
      tags:
        - Tanks
      responses:
        '200':
          description: A list of tanks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tank'

  /tanks/{id}:
    get:
      summary: Get a tank by ID
      tags:
        - Tanks
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the tank
      responses:
        '200':
          description: A tank object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tank'
        '404':
          description: Tank not found

  /maps:
    get:
      summary: Get all maps
      tags:
        - Maps
      responses:
        '200':
          description: A list of maps
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Map'

  /maps/{id}:
    get:
      summary: Get a map by ID
      tags:
        - Maps
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the map
      responses:
        '200':
          description: A map object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Map'
        '404':
          description: Map not found

  /players:
    get:
      summary: Get all players
      tags:
        - Players
      responses:
        '200':
          description: A list of players
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Player'

  /players/{id}:
    get:
      summary: Get a player by ID
      tags:
        - Players
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the player
      responses:
        '200':
          description: A player object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        '404':
          description: Player not found

  /scores:
    get:
      summary: Get all scores
      tags:
        - Scores
      responses:
        '200':
          description: A list of scores
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Score'

  /scores/{id}:
    get:
      summary: Get a score by ID
      tags:
        - Scores
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the score
      responses:
        '200':
          description: A score object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Score'
        '404':
          description: Score not found

  /leaderboard:
    get:
      summary: Get the global leaderboard
      tags:
        - Leaderboard
      responses:
        '200':
          description: Global leaderboard
          content:
            application/json:
              schema:
                type: object
                properties:
                  global_leaderboard:
                    type: array
                    items:
                      type: object
                      properties:
                        player_id:
                          type: string
                          format: uuid
                          example: "6c22e945-a340-41f3-8ae4-c05bff1f6de8"
                        top_score:
                          type: integer
                          example: 917

  /simulate:
    post:
      summary: Simulate a battle between two tanks
      tags:
        - Simulation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tanks:
                  type: array
                  items:
                    type: string
                  description: Array of two tank IDs
                mapid:
                  type: string
                  description: ID of the map
      responses:
        '200':
          description: Battle simulation result
          content:
            application/json:
              schema:
                type: object
                properties:
                  winner:
                    $ref: '#/components/schemas/Tank'
                  score:
                    $ref: '#/components/schemas/Score'

components:
  schemas:
    Tank:
      type: object
      properties:
        id:
          type: string
          example: "123e4567-e89b-12d3-a456-426614174000"
        type:
          type: string
          example: "Panzer"
        speed:
          type: integer
          example: 50
        turret_range:
          type: integer
          example: 100
        health_points:
          type: integer
          example: 1000
        created_at:
          type: string
          format: date-time
          example: "2024-05-01T12:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-05-01T12:00:00Z"

    Map:
      type: object
      properties:
        id:
          type: string
          example: "123e4567-e89b-12d3-a456-426614174002"
        grid:
          type: array
          items:
            type: array
            items:
              type: integer
          example: [[0, 10, 0], [20, 0, 10], [0, 10, 20]]
        created_at:
          type: string
          format: date-time
          example: "2024-05-01T12:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-05-01T12:00:00Z"

    Player:
      type: object
      properties:
        id:
          type: string
          example: "123e4567-e89b-12d3-a456-426614174003"
        name:
          type: string
          example: "John Doe"
        created_at:
          type: string
          format: date-time
          example: "2024-05-01T12:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-05-01T12:00:00Z"

    Score:
      type: object
      properties:
        id:
          type: string
          example: "123e4567-e89b-12d3-a456-426614174004"
        player_id:
          type: string
          example: "123e4567-e89b-12d3-a456-426614174003"
        score:
          type: integer
          example: 750
        created_at:
          type: string
          format: date-time
          example: "2024-05-01T12:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-05-01T12:00:00Z"